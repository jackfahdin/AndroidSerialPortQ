/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include "include/SerialPortLog.h"
#include "include/SerialPort.h"

SerialPort *getSerialPort(JNIEnv *env, jobject thiz) {
    jclass clazz = env->GetObjectClass(thiz);
    jfieldID fid = env->GetFieldID(clazz, "nativeSerialPort", "J");
    jlong p = env->GetLongField(thiz, fid);
    return (SerialPort *) p;
}

void setSerialPort(JNIEnv *env, jobject thiz, const SerialPort *pSerialPort) {
    jclass clazz = env->GetObjectClass(thiz);
    jfieldID fid = env->GetFieldID(clazz, "nativeSerialPort", "J");
    env->SetLongField(thiz, fid, (jlong) pSerialPort);
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_jackfahdin_SerialPortJNI_SerialPort_openSerialPort(JNIEnv *env, jobject thiz, jstring path,
                                                            jint baudRate, jint dataBits,
                                                            jint stopBits, jchar parity) {
    try {
        SerialPortConfig config;
        config = SerialPortConfig();
        config.baudrate = baudRate;
        config.databits = dataBits;
        config.stopbits = stopBits;
        config.parity = parity;
        SerialPort *pSerialPort = new SerialPort(env->GetStringUTFChars(path, 0));
        setSerialPort(env, thiz, pSerialPort);
        return pSerialPort->openSerialPort(config);
    } catch (char *exception) {
        LOGE("Open device is error! Message:%s", exception);
        return FALSE;
    }
}

extern "C"
JNIEXPORT jbyteArray JNICALL
Java_com_jackfahdin_SerialPortJNI_SerialPort_readData(JNIEnv *env, jobject thiz, jbyteArray data,
                                                      jint size) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    BYTE buf[size];
    int len;
    len = pSerialPort->readData(buf, size);
    if (len < 1) return NULL;
    jbyteArray byteArray;
    jbyte *bytes = reinterpret_cast<jbyte *>(buf);
    byteArray = env->NewByteArray(len);
    env->SetByteArrayRegion(byteArray, 0, len, bytes);
    return byteArray;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_jackfahdin_SerialPortJNI_SerialPort_writeData(JNIEnv *env, jobject thiz, jbyteArray data,
                                                       jint len) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    jbyte *array = env->GetByteArrayElements(data, 0);
    BYTE *bytes = reinterpret_cast<BYTE *>(array);
    jsize arrayLength = env->GetArrayLength(data);
    pSerialPort->writeData(bytes, (int) arrayLength);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_jackfahdin_SerialPortJNI_SerialPort_closePort(JNIEnv *env, jobject thiz) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    pSerialPort->closePort();
    pSerialPort = NULL;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_jackfahdin_SerialPortJNI_SerialPort_setMode(JNIEnv *env, jobject thiz, jint mode) {
    SerialPort *pSerialPort = getSerialPort(env, thiz);

    return pSerialPort->setMode(mode);
}